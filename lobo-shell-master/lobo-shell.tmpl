--------------------------------------------------------------------------

            +-------------------------+
            | CS 450                  |
            | PROJECT: LOBO SHELL     |
            | DESIGN DOCUMENT         |
            +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Andrew Avola <avolaa@sonoma.edu>
Amit Deb <deb@sonoma.edu>
Alana Reyna <reyna@sonoma.edu>
Kallista Stamas <stamask@sonoma.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission or
>> bug notes, please give them here.

N/A

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than man pages, course
>> text, lecture notes, and course staff.

N/A


               LOBO SHELL
               ==========

---- EXPLORE THE PROBLEM ----

>> A1: To open a file for I/O re-direction requires various flags
>> and parameters passed to the open() call. Explore bash as an
>> example shell and list the parameters used in
>>     open(bar,...)
>> for each of these scenarios:
>>   (i) foo > bar
>>  (ii) foo < bar
>> (iii) foo >> bar

(i): (output redirection) open(bar, O_CREAT | O_WRONLY, 0664);
(ii): (input redirection) open(bar, O_RDONLY, 0);
(iii): (Append redirection) open(bar, O_APPEND | O_CREAT | O_WRONLY, 0664);

>> A2: Create scenarios to test and describe how bash behaves in
>> each of these scenarios:
>>   (i) foo < bar, when "bar" does not exist?
>>  (ii) foo < bar, when "bar" exists but you lack permission to read it?
>> (iii) foo > bar, when "bar" exists but you lack permission to write it?
>>  (iv) foo > bar, when "bar" cannot be created?
>> In each case, give the commands you used to create and evaluate 
>> the scenario.

(i): bash: bar: no such file or directory
(ii): bash: bar: permission denied 
(iii): bash: bar: permission denied 
(iv): bash: bar: file not created 

>> A3: Unix pipes allow synchronization among processes to facilitate
>> interprocess communication (IPC). Consider a pipeline of arbitrary
>> length, like:
>>     P[0] | P[1] | ... | P[i-1] | P[i] | P[i+1] | ... | P[n]
>> Imagine a loop, like:
>>     for i in 0 .. n: 
>>         set-up-pipeline-for( process P[i] )
>> What prior-created pipes would be used with process P[i]?
>> What new pipes need to be created to set up P[i]'s pipeline?

The pipes found before P[i] (0-i) will be piped to P[i]. There needs to be a creation of pipes
from P[i] to P[i+1] (keep going until we reach P[n]) to set up P[i]'s pipeline. 

---- DATA STRUCTURES ----

>> A4: Copy here the declaration of each new `struct',
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 2--25 words.

We do not have any structs, struct members, global, static variables, or enumerations in the code.



---- FUNCTIONS ----

>> A5: Provide a prototype and documentation for each function
>> you have introduced to support this portion of the project.
>> Use the Google Style Guide for function documentation.


/**
 * @brief 
 * int checkForPipes(char** line_words): Counts the total number of pipes present in line_words
 * @param: line_words 
 * Entire command line of strings after the user presses enter
 * @return: int 
 * Returns number of pipes in line_words to caller
 */

/**
 * @brief 
 * void closePfd(int pfd[][2], int pipeCounter): 
 * Function to handle closing all active file descriptors in children and parent process
 * @param pfd 
 * Pointer to pfd variables from caller in main
 * @param pipeCounter 
 * Used as an iterator to close all active file descriptors for pipes
 */

 /**
 * @brief 
 * char **createTempArray(char **line_words, int wordCount, int *indexesToStart, int index):
 * Creates an array of pointers to strings that will be used to hold the current command
 * we will be executing, excluding pipes
 * @param line_words 
 * Entire command line of strings after the user presses enter
 * @param wordCount 
 * Number of words between pipes
 * @param indexesToStart 
 * Array that holds the index we will be starting from when parsing and storing current command
 * @param index 
 * Uses 'i' from for loop in main that corresponds to which command in order from left to right
 * in the command we will be storing and executing
 * @return char** 
 * Returns dynamically allocated array of strings, which stores entire command to be executed
 * before file descriptor processing
 */


/**
 * @brief 
 * char** wordsBeforeRedirection(char **line_words): 
 * Function that is used to count and store the number of words that come before a 
 * redirection operator inside of line_words
 * @param: line_words 
 * Entire command line of strings after the user presses enter
 * @return: char** 
 * Returns dynamically allocated array of strings that will hold the command that comes
 * before the redirection operator in line_words
 */

/**
 * @brief 
 * bool checkForRedirection(char **line_words): Checks if line_words has a redirection operator present
 * @param line_words 
 * Entire command line of strings after the user presses enter
 * @return true 
 * Returns true if a redirection operator is found in line_words
 * @return false 
 * Returns false if a redirection operator is not found in line_words
 */

 /**
 * @brief 
 * void doRedirection(char **line_words): Function that handles the file descriptor processing when dealing with a command that 
 * uses redirection
 * @param line_words 
 * Entire command line of strings after the user presses enter
 */

 /**
 * @brief 
 * bool checkForQuotes(char **line_words): Checks if line_words has a double quote (") present in entirety of command line string
 * @param line_words 
 * Entire command line of strings after the user presses enter
 * @return true 
 * Returns true if (") is found
 * @return false 
 * Returns false if (") is not found
 */

/**
 * @brief 
 * char **quotingParse(char **line_words): Parses through all of line_words and detects when we run into a double quote character (").
 * Once one is found, the current string that is being parsed through in line_words at some index 'i'
 * will have all of its characters left shifted to essentially delete the (") character while maintaining
 * proper string structure. A new temporary string (tempString) will be used to concatenate all separate strings
 * from line_words into itself until a second (") is found. Everything inbetween these double quotes will now 
 * be considered a singular string instead of multiple separate ones, and will be stored into a new corrected
 * command string during iteration.
 * @param line_words 
 * Entire command line of strings after the user presses enter
 * @return char** 
 * Newly corrected array of strings to be returned to caller in main for quotation escape execution
 */

 /**
 * @brief 
 * int countWordsBetweenPipes(char **line_words, int *indexesToStart, int index): 
 * Function to cound words between pipes excluding the pipe
 * @param line_words
 * Entire command line of strings after the user presses enter
 * @param indexesToStart 
 * Indicates where we will begin our counting from in line_words each 
 * time the function is called
 * @param index 
 * Used to dereference indexes to start which is an array that stores all pipe + 1 indexes in line_words
 * @return int
 * Returns word count between pipes to user
 */

/**
 * @brief 
 * Loops through entirety of line_words and will store index values in a dynamically
 * allocated integer array where we will start our index into line_words when counting
 * the number of words between each pipe. 
 * @param line_words 
 * Entire command line of strings after the user presses enter
 * @param pipeCounter 
 * How many pipes we have counted in the entirety of line_words
 * @return int* 
 * Returns dynamically allocated integer array that stores all indexes of where we will begin our
 * command parsing. This is so we can deal with excluding our pipes in line_words
 */


---- ALGORITHMS ----

>> A6: Briefly describe how the functions (from A5) are called
>> when your shell is processing the user-entered commands:
>>   foo 1 2 | bar 3 4

Firstly, checkForPipes() will be called and line_words will be parsed, returning
the total amount of pipes in the entire command. Since this command has one pipe,
the next function to be called will be whichIdxToStart(). This function's role is to
return an integer array that stores the indexes of where to begin parsing our line_words
command, essentially skipping around the pipe. For this particular example command given to
us, it will store index 0 (foo) and index 4 (bar). Next, createTempArray() is called
and this will return the commands that are present in front, between, or at the end
of our pipes. For this example, "foo 1 2" will be stored in the first iteration, and
"bar 3 4" will be stored in the next. Some functions that do some processing to check for 
redirection or quoting will be called along the way. These will be checkForQuotes() and 
checkForRedirection(). These functions will return false for our particular example,
so the functions that process quoting and redirection (quotingParse(), wordsBeforeRedirection(), and doRedirection())
will NOT be called. 


>> A7: Briefly describe your approch for reaping child processes. When do
>> you reap, and how much do you reap at a time? Would it be possible to
>> reap children earlier than your current implementation and, if so,
>> what situations might that benefit?

In our implementation, our parent will reap the child processes at the earliest
possible time. The total amount of children processes that are reaped at a time
is equivalent to the amount of pipes in the program + 1(total amount of commands)
entered by user in the command line.  

---- RATIONALE ----

>> A8: Does any aspect of our shell require multithreading or related
>> synchronization primitives (locks, semaphores)? Is the bash shell
>> (http://git.savannah.gnu.org/cgit/bash.git/) multithreaded?
>> What did you grep to determine the answer?

No our shell doesnt requires multithreading or any related synchronization primitives.
No the bash shell isnt multithreaded. We found this out by grepping fork, thread, 
single, and multithread. The only result we got back was from fork. 
We can conclude that the bash has no mention of threading anywhere thus it 
does not use threading.

>> A9: Develop a new test, not covered by existing tests. Provide the 
>> code implementing that test. When possible, follow the format of 
>> existing tests. Explain what functionality it tests and how it goes 
>> beyond the provided tests.


This test is to see if our existing code will handle escaping double quotes
that are leading and ending with '\"'. The current quoting test only checks 
if we can concatenate whatever is encased in double quotes into a singular
string. This test goes past that and checks if we can ignore the escape
characters during parsing. After having ignored those characters, we remove them
later while still keeping track of the outer encasing double quotes.


OUT=tests/output/`basename ${0%.sh}`.out
EOUT=tests/output/`basename ${0%.sh}`.eout
rm -f $OUT $EOUT tests/output/shouldnt-exist

./lobo_shell.x >$OUT << 'EOF'
echo "hello \"hi\" hello"
EOF

echo "hello \"hi\" hello" > $EOUT

if [ -f tests/output/shouldnt-exist* ]; then 
    echo "TEST FAILED $0"
    rm -f tests/output/shouldnt-exist*
    exit
fi

diff $OUT $EOUT && echo "PASSED $0" || echo "TEST FAILED $0"




               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Overall, getting the escaped quoting working to a functional state took
quite some time. Since we had a month to do the project I think there was
sufficient amount of time to get this one. Our group has other classes like 454
so we didn't have the most time to work on it, but in the end made it happen. 

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

I think the overall lesson we learned about OS design from this project was
how pipes and forks work. It was good to get more practice in and understand it more
on a lower level. 

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I think giving students a rundown on GDB or valgrind will be very helpful in
the future. This assignment is prone to many segfaults because of reaching into
memory in tons of places. 'C' isn't very good at telling you where segfaults occur. 
Another tip you can give students is going into redirection in more detail. I feel 
as if the checkpoint wasn't enough to understand how to use the functions properly for
redirection. Documentation and videos can help but I feel that students in the future
should go into the project with confidence on tackling some of these problems. 

>> Any other comments?